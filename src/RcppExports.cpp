// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rucrdtw.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ucrdtw_ff
Rcpp::List ucrdtw_ff(const char * data, const char * query, int qlength, double dtwwindow);
static SEXP _rucrdtw_ucrdtw_ff_try(SEXP dataSEXP, SEXP querySEXP, SEXP qlengthSEXP, SEXP dtwwindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const char * >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const char * >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type qlength(qlengthSEXP);
    Rcpp::traits::input_parameter< double >::type dtwwindow(dtwwindowSEXP);
    rcpp_result_gen = Rcpp::wrap(ucrdtw_ff(data, query, qlength, dtwwindow));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rucrdtw_ucrdtw_ff(SEXP dataSEXP, SEXP querySEXP, SEXP qlengthSEXP, SEXP dtwwindowSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rucrdtw_ucrdtw_ff_try(dataSEXP, querySEXP, qlengthSEXP, dtwwindowSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ucrdtw_fv
Rcpp::List ucrdtw_fv(const char * data, Rcpp::NumericVector query, double dtwwindow);
static SEXP _rucrdtw_ucrdtw_fv_try(SEXP dataSEXP, SEXP querySEXP, SEXP dtwwindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const char * >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< double >::type dtwwindow(dtwwindowSEXP);
    rcpp_result_gen = Rcpp::wrap(ucrdtw_fv(data, query, dtwwindow));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rucrdtw_ucrdtw_fv(SEXP dataSEXP, SEXP querySEXP, SEXP dtwwindowSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rucrdtw_ucrdtw_fv_try(dataSEXP, querySEXP, dtwwindowSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ucrdtw_vv
Rcpp::List ucrdtw_vv(Rcpp::NumericVector data, Rcpp::NumericVector query, double dtwwindow, int epoch, bool skip);
static SEXP _rucrdtw_ucrdtw_vv_try(SEXP dataSEXP, SEXP querySEXP, SEXP dtwwindowSEXP, SEXP epochSEXP, SEXP skipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< double >::type dtwwindow(dtwwindowSEXP);
    Rcpp::traits::input_parameter< int >::type epoch(epochSEXP);
    Rcpp::traits::input_parameter< bool >::type skip(skipSEXP);
    rcpp_result_gen = Rcpp::wrap(ucrdtw_vv(data, query, dtwwindow, epoch, skip));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rucrdtw_ucrdtw_vv(SEXP dataSEXP, SEXP querySEXP, SEXP dtwwindowSEXP, SEXP epochSEXP, SEXP skipSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rucrdtw_ucrdtw_vv_try(dataSEXP, querySEXP, dtwwindowSEXP, epochSEXP, skipSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ucred_ff
Rcpp::List ucred_ff(const char * data, const char * query, int qlength);
static SEXP _rucrdtw_ucred_ff_try(SEXP dataSEXP, SEXP querySEXP, SEXP qlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const char * >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const char * >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type qlength(qlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(ucred_ff(data, query, qlength));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rucrdtw_ucred_ff(SEXP dataSEXP, SEXP querySEXP, SEXP qlengthSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rucrdtw_ucred_ff_try(dataSEXP, querySEXP, qlengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ucred_fv
Rcpp::List ucred_fv(const char * data, Rcpp::NumericVector query);
static SEXP _rucrdtw_ucred_fv_try(SEXP dataSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const char * >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(ucred_fv(data, query));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rucrdtw_ucred_fv(SEXP dataSEXP, SEXP querySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rucrdtw_ucred_fv_try(dataSEXP, querySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ucred_vv
Rcpp::List ucred_vv(Rcpp::NumericVector data, Rcpp::NumericVector query, bool skip);
static SEXP _rucrdtw_ucred_vv_try(SEXP dataSEXP, SEXP querySEXP, SEXP skipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< bool >::type skip(skipSEXP);
    rcpp_result_gen = Rcpp::wrap(ucred_vv(data, query, skip));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _rucrdtw_ucred_vv(SEXP dataSEXP, SEXP querySEXP, SEXP skipSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_rucrdtw_ucred_vv_try(dataSEXP, querySEXP, skipSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _rucrdtw_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*ucrdtw_ff)(const char *,const char *,int,double)");
        signatures.insert("Rcpp::List(*ucrdtw_fv)(const char *,Rcpp::NumericVector,double)");
        signatures.insert("Rcpp::List(*ucrdtw_vv)(Rcpp::NumericVector,Rcpp::NumericVector,double,int,bool)");
        signatures.insert("Rcpp::List(*ucred_ff)(const char *,const char *,int)");
        signatures.insert("Rcpp::List(*ucred_fv)(const char *,Rcpp::NumericVector)");
        signatures.insert("Rcpp::List(*ucred_vv)(Rcpp::NumericVector,Rcpp::NumericVector,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _rucrdtw_RcppExport_registerCCallable() { 
    R_RegisterCCallable("rucrdtw", "_rucrdtw_ucrdtw_ff", (DL_FUNC)_rucrdtw_ucrdtw_ff_try);
    R_RegisterCCallable("rucrdtw", "_rucrdtw_ucrdtw_fv", (DL_FUNC)_rucrdtw_ucrdtw_fv_try);
    R_RegisterCCallable("rucrdtw", "_rucrdtw_ucrdtw_vv", (DL_FUNC)_rucrdtw_ucrdtw_vv_try);
    R_RegisterCCallable("rucrdtw", "_rucrdtw_ucred_ff", (DL_FUNC)_rucrdtw_ucred_ff_try);
    R_RegisterCCallable("rucrdtw", "_rucrdtw_ucred_fv", (DL_FUNC)_rucrdtw_ucred_fv_try);
    R_RegisterCCallable("rucrdtw", "_rucrdtw_ucred_vv", (DL_FUNC)_rucrdtw_ucred_vv_try);
    R_RegisterCCallable("rucrdtw", "_rucrdtw_RcppExport_validate", (DL_FUNC)_rucrdtw_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_rucrdtw_ucrdtw_ff", (DL_FUNC) &_rucrdtw_ucrdtw_ff, 4},
    {"_rucrdtw_ucrdtw_fv", (DL_FUNC) &_rucrdtw_ucrdtw_fv, 3},
    {"_rucrdtw_ucrdtw_vv", (DL_FUNC) &_rucrdtw_ucrdtw_vv, 5},
    {"_rucrdtw_ucred_ff", (DL_FUNC) &_rucrdtw_ucred_ff, 3},
    {"_rucrdtw_ucred_fv", (DL_FUNC) &_rucrdtw_ucred_fv, 2},
    {"_rucrdtw_ucred_vv", (DL_FUNC) &_rucrdtw_ucred_vv, 3},
    {"_rucrdtw_RcppExport_registerCCallable", (DL_FUNC) &_rucrdtw_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rucrdtw(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
